# ELK stack docker compose

volumes:
  certs:
  elasticsearch:
  kibana:
  logs:
    external: true

networks:
  elk-stack:
    name: elk-stack

services:
  setup:
    container_name: setup
    build: ./setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    networks:
      - elk-stack
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]']
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    build: ./elasticsearch
    ports:
      - 9200:9200
    restart: unless-stopped
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch:/usr/share/elasticsearch/data
    env_file:
      - .env
    networks:
      - elk-stack
    mem_limit: ${MEM_LIMIT}
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1

  kibana:
    container_name: kibana
    depends_on:
      setup:
        condition: service_healthy
    build: ./kibana
    ports:
      - 5601:5601
    restart: unless-stopped
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    env_file:
      - .env
    networks:
      - elk-stack
    mem_limit: ${MEM_LIMIT}

  logstash:
    container_name: logstash
    depends_on:
      setup:
        condition: service_healthy
    build: ./logstash
    restart: unless-stopped
    volumes:
      - certs:/usr/share/logstash/config/certs
      - logs:/usr/share/logstash/logs
    env_file:
      - .env
    networks:
      - elk-stack
    mem_limit: ${MEM_LIMIT}
