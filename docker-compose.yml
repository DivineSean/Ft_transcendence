services:
  frontend:
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      - 3000:3000
    container_name: frontend
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - ./frontend/public/:/home/app/public
      - ./frontend/src/:/home/app/src

  backend:
    build: 
      context: ./
      dockerfile: ./backend/Dockerfile
    # ports:
    #   - 8000:8000
    container_name: backend
    env_file:
        - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./backend/:/home/app

  db:
    build:
      context: ./
      dockerfile: ./db/Dockerfile
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 5s
      retries: 5
      start_period: 30s
      timeout: 10s
    # ports:
    #   - 5432:5432
    container_name: db
    env_file:
        - .env
    restart: unless-stopped
    volumes:
      - data:/var/lib/postgresql/data

  redis:
    build:
      context: ./
      dockerfile: ./redis/Dockerfile
    container_name: redis
    env_file:
        - .env
    healthcheck:
      test: "redis-cli -p ${REDIS_PORT} -a ${REDIS_PASSWORD} ping"
      interval: 5s
      retries: 5
      start_period: 30s
      timeout: 10s
    deploy:
      resources:
        limits:
          memory: 512m  # Set the max memory for this container
        reservations:
          memory: 256m  # Set the minimum guaranteed memory
    restart: unless-stopped

  nginx:
    build: 
      context: ./
      dockerfile: ./nginx/Dockerfile
    ports:
      - 8000:8000
    container_name: nginx
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - ./backend/static:/home/app/static

volumes:
  data:
