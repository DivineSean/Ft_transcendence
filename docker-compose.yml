volumes:
  data:
    name: data
  certs:
    name: certs
  media:
    name: media
  static:
    name: static
  logs:
    name: logs

networks:
  ft_transcendence:
    name: ft_transcendence

services:
  frontend-dev:
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
      target: dev
    ports:
      - 3000:3000
    container_name: frontend
    depends_on:
      - nginx-dev
    restart: unless-stopped
    user: root
    volumes:
      - ./frontend/public/:/home/app/public:rw
      - ./frontend/src/:/home/app/src:rw
      - certs:/home/certs
    networks:
        - ft_transcendence
    profiles:
      - dev
  frontend:
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
      target: prod
    container_name: frontend
    volumes:
      - ./frontend/dist/:/home/app/dist:rw
    networks:
        - ft_transcendence
    profiles:
      - prod

  backend-dev:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    container_name: backend
    env_file:
        - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    user: root
    volumes:
      - ./backend/:/home/app:rw
      - static:/home/app/static
      - logs:/var/log/uvicorn/
    networks:
        - ft_transcendence
    profiles:
      - dev
  backend:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    container_name: backend
    env_file:
        - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - media:/home/app/media/
      - static:/home/app/static/
      - logs:/var/log/uvicorn/
    networks:
        - ft_transcendence
    profiles:
      - prod

  db:
    build:
      context: ./
      dockerfile: ./db/Dockerfile
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 5s
      retries: 5
      start_period: 30s
      timeout: 10s
    container_name: db
    env_file:
        - .env
    restart: unless-stopped
    volumes:
      - data:/var/lib/postgresql/data
    networks:
        - ft_transcendence
    profiles:
      - dev
      - prod

  redis:
    build:
      context: ./
      dockerfile: ./redis/Dockerfile
    container_name: redis
    env_file:
        - .env
    healthcheck:
      test: "redis-cli -p ${REDIS_PORT} -a ${REDIS_PASSWORD} ping"
      interval: 5s
      retries: 5
      start_period: 30s
      timeout: 10s
    mem_limit: ${REDIS_MAXMEMORY}
    restart: unless-stopped
    networks:
        - ft_transcendence
    profiles:
      - dev
      - prod

  nginx-dev:
    build:
      context: ./
      dockerfile: ./nginx/Dockerfile
      target: dev
    ports:
      - 8000:8000
    container_name: nginx
    depends_on:
      - backend-dev
    restart: unless-stopped
    volumes:
      - static:/home/app/static:ro
      - logs:/var/log/nginx
      - certs:/etc/certs
    networks:
        - ft_transcendence
    profiles:
      - dev
  nginx:
    build:
      context: ./
      dockerfile: ./nginx/Dockerfile
      target: prod
    ports:
      # - 443:443
      # - 80:80
      - 3000:443
    container_name: nginx
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - static:/home/app/static:ro
      - media:/home/app/media:ro
      - logs:/var/log/nginx/
      - ./frontend/dist/:/home/app/dist:ro
    networks:
        - ft_transcendence
    profiles:
      - prod
